// Code generated by protoc-gen-go. DO NOT EDIT.
// source: candidatura.proto

package descritor

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Candidatura struct {
	Legislatura           int64      `protobuf:"varint,1,opt,name=Legislatura,proto3" json:"leg" csv:"leg"`
	Cargo                 string     `protobuf:"bytes,2,opt,name=Cargo,proto3" json:"cargo" csv:"cargo"`
	UF                    string     `protobuf:"bytes,3,opt,name=UF,proto3" json:"uf" csv:"uf"`
	Municipio             string     `protobuf:"bytes,4,opt,name=Municipio,proto3" json:"municipio" csv:"municipio"`
	NumeroUrna            int64      `protobuf:"varint,5,opt,name=NumeroUrna,proto3" json:"numero_urna" csv:"numero_urna"`
	NomeUrna              string     `protobuf:"bytes,6,opt,name=NomeUrna,proto3" json:"nome_urna" csv:"nome_urna"`
	Aptdao                string     `protobuf:"bytes,7,opt,name=Aptdao,proto3" json:"aptidao" csv:"aptidao"`
	Deferimento           string     `protobuf:"bytes,8,opt,name=Deferimento,proto3" json:"deferimento" csv:"deferimento"`
	TipoAgremiacao        string     `protobuf:"bytes,9,opt,name=TipoAgremiacao,proto3" json:"tipo_agremiacao" csv:"tipo_agremiacao"`
	NumeroPartido         int64      `protobuf:"varint,10,opt,name=NumeroPartido,proto3" json:"numero_partio" csv:"numero_partido"`
	LegendaPartido        string     `protobuf:"bytes,11,opt,name=LegendaPartido,proto3" json:"legenda_partido" csv:"legenda_partido"`
	NomePartido           string     `protobuf:"bytes,12,opt,name=NomePartido,proto3" json:"nome_partido" csv:"nome_partido"`
	NomeColigacao         string     `protobuf:"bytes,13,opt,name=NomeColigacao,proto3" json:"nome_coligacao" csv:"nome_coligacao"`
	PartidosColigacao     string     `protobuf:"bytes,14,opt,name=PartidosColigacao,proto3" json:"partidos_coligacao" csv:"partidos_coligacao"`
	DeclarouBens          bool       `protobuf:"varint,15,opt,name=DeclarouBens,proto3" json:"declarou_bens" csv:"declarou_bens"`
	SituacaoPrimeiroTurno string     `protobuf:"bytes,16,opt,name=SituacaoPrimeiroTurno,proto3" json:"situacao_1turno" csv:"situacao_1turno"`
	SituacaoSegundoTurno  string     `protobuf:"bytes,17,opt,name=SituacaoSegundoTurno,proto3" json:"situacao_2turno" csv:"situacao_2turno"`
	SequencialCandidato   string     `protobuf:"bytes,18,opt,name=SequencialCandidato,proto3" json:"sequencial_candidato" csv:"sequencial_candidato"`
	Candidato             *Candidato `protobuf:"bytes,19,opt,name=candidato,proto3" json:"candidato,omitempty" csv:"-"`
	XXX_NoUnkeyedLiteral  struct{}   `json:"-" csv:"-"`
	XXX_unrecognized      []byte     `json:"-" csv:"-"`
	XXX_sizecache         int32      `json:"-" csv:"-"`
}

func (m *Candidatura) Reset()         { *m = Candidatura{} }
func (m *Candidatura) String() string { return proto.CompactTextString(m) }
func (*Candidatura) ProtoMessage()    {}
func (*Candidatura) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc4fb5b387980952, []int{0}
}

func (m *Candidatura) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Candidatura.Unmarshal(m, b)
}
func (m *Candidatura) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Candidatura.Marshal(b, m, deterministic)
}
func (m *Candidatura) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Candidatura.Merge(m, src)
}
func (m *Candidatura) XXX_Size() int {
	return xxx_messageInfo_Candidatura.Size(m)
}
func (m *Candidatura) XXX_DiscardUnknown() {
	xxx_messageInfo_Candidatura.DiscardUnknown(m)
}

var xxx_messageInfo_Candidatura proto.InternalMessageInfo

func (m *Candidatura) GetLegislatura() int64 {
	if m != nil {
		return m.Legislatura
	}
	return 0
}

func (m *Candidatura) GetCargo() string {
	if m != nil {
		return m.Cargo
	}
	return ""
}

func (m *Candidatura) GetUF() string {
	if m != nil {
		return m.UF
	}
	return ""
}

func (m *Candidatura) GetMunicipio() string {
	if m != nil {
		return m.Municipio
	}
	return ""
}

func (m *Candidatura) GetNumeroUrna() int64 {
	if m != nil {
		return m.NumeroUrna
	}
	return 0
}

func (m *Candidatura) GetNomeUrna() string {
	if m != nil {
		return m.NomeUrna
	}
	return ""
}

func (m *Candidatura) GetAptdao() string {
	if m != nil {
		return m.Aptdao
	}
	return ""
}

func (m *Candidatura) GetDeferimento() string {
	if m != nil {
		return m.Deferimento
	}
	return ""
}

func (m *Candidatura) GetTipoAgremiacao() string {
	if m != nil {
		return m.TipoAgremiacao
	}
	return ""
}

func (m *Candidatura) GetNumeroPartido() int64 {
	if m != nil {
		return m.NumeroPartido
	}
	return 0
}

func (m *Candidatura) GetLegendaPartido() string {
	if m != nil {
		return m.LegendaPartido
	}
	return ""
}

func (m *Candidatura) GetNomePartido() string {
	if m != nil {
		return m.NomePartido
	}
	return ""
}

func (m *Candidatura) GetNomeColigacao() string {
	if m != nil {
		return m.NomeColigacao
	}
	return ""
}

func (m *Candidatura) GetPartidosColigacao() string {
	if m != nil {
		return m.PartidosColigacao
	}
	return ""
}

func (m *Candidatura) GetDeclarouBens() bool {
	if m != nil {
		return m.DeclarouBens
	}
	return false
}

func (m *Candidatura) GetSituacaoPrimeiroTurno() string {
	if m != nil {
		return m.SituacaoPrimeiroTurno
	}
	return ""
}

func (m *Candidatura) GetSituacaoSegundoTurno() string {
	if m != nil {
		return m.SituacaoSegundoTurno
	}
	return ""
}

func (m *Candidatura) GetSequencialCandidato() string {
	if m != nil {
		return m.SequencialCandidato
	}
	return ""
}

func (m *Candidatura) GetCandidato() *Candidato {
	if m != nil {
		return m.Candidato
	}
	return nil
}

type Candidato struct {
	UF                   string               `protobuf:"bytes,1,opt,name=UF,proto3" json:"uf_origem" csv:"uf_origem"`
	Municipio            string               `protobuf:"bytes,2,opt,name=Municipio,proto3" json:"municipio_origem" csv:"municipio_origem"`
	Nascimento           *timestamp.Timestamp `protobuf:"bytes,3,opt,name=Nascimento,proto3" json:"nascimento" csv:"nascimento"`
	TituloEleitoral      string               `protobuf:"bytes,4,opt,name=TituloEleitoral,proto3" json:"titulo_eleitoral" csv:"titulo_eleitoral"`
	Genero               string               `protobuf:"bytes,5,opt,name=Genero,proto3" json:"genero" csv:"genero"`
	GrauInstrucao        string               `protobuf:"bytes,6,opt,name=GrauInstrucao,proto3" json:"grau_instrucao" csv:"grau_instrucao"`
	EstadoCivil          string               `protobuf:"bytes,7,opt,name=EstadoCivil,proto3" json:"estado_civil" csv:"estado_civil"`
	Raca                 string               `protobuf:"bytes,8,opt,name=Raca,proto3" json:"raca" csv:"raca"`
	Ocupacao             string               `protobuf:"bytes,9,opt,name=Ocupacao,proto3" json:"ocupacao" csv:"ocupacao"`
	CPF                  string               `protobuf:"bytes,10,opt,name=CPF,proto3" json:"cpf" csv:"cpf"`
	Nome                 string               `protobuf:"bytes,11,opt,name=Nome,proto3" json:"nome" csv:"nome"`
	Email                string               `protobuf:"bytes,12,opt,name=Email,proto3" json:"email" csv:"email"`
	PhotoURL             string               `protobuf:"bytes,13,opt,name=PhotoURL,proto3" json:"photo_url" csv:"photo_url"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-" csv:"-"`
	XXX_unrecognized     []byte               `json:"-" csv:"-"`
	XXX_sizecache        int32                `json:"-" csv:"-"`
}

func (m *Candidato) Reset()         { *m = Candidato{} }
func (m *Candidato) String() string { return proto.CompactTextString(m) }
func (*Candidato) ProtoMessage()    {}
func (*Candidato) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc4fb5b387980952, []int{1}
}

func (m *Candidato) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Candidato.Unmarshal(m, b)
}
func (m *Candidato) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Candidato.Marshal(b, m, deterministic)
}
func (m *Candidato) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Candidato.Merge(m, src)
}
func (m *Candidato) XXX_Size() int {
	return xxx_messageInfo_Candidato.Size(m)
}
func (m *Candidato) XXX_DiscardUnknown() {
	xxx_messageInfo_Candidato.DiscardUnknown(m)
}

var xxx_messageInfo_Candidato proto.InternalMessageInfo

func (m *Candidato) GetUF() string {
	if m != nil {
		return m.UF
	}
	return ""
}

func (m *Candidato) GetMunicipio() string {
	if m != nil {
		return m.Municipio
	}
	return ""
}

func (m *Candidato) GetNascimento() *timestamp.Timestamp {
	if m != nil {
		return m.Nascimento
	}
	return nil
}

func (m *Candidato) GetTituloEleitoral() string {
	if m != nil {
		return m.TituloEleitoral
	}
	return ""
}

func (m *Candidato) GetGenero() string {
	if m != nil {
		return m.Genero
	}
	return ""
}

func (m *Candidato) GetGrauInstrucao() string {
	if m != nil {
		return m.GrauInstrucao
	}
	return ""
}

func (m *Candidato) GetEstadoCivil() string {
	if m != nil {
		return m.EstadoCivil
	}
	return ""
}

func (m *Candidato) GetRaca() string {
	if m != nil {
		return m.Raca
	}
	return ""
}

func (m *Candidato) GetOcupacao() string {
	if m != nil {
		return m.Ocupacao
	}
	return ""
}

func (m *Candidato) GetCPF() string {
	if m != nil {
		return m.CPF
	}
	return ""
}

func (m *Candidato) GetNome() string {
	if m != nil {
		return m.Nome
	}
	return ""
}

func (m *Candidato) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *Candidato) GetPhotoURL() string {
	if m != nil {
		return m.PhotoURL
	}
	return ""
}

type CandidaturasDeCidade struct {
	Group                map[string]*Candidatura `protobuf:"bytes,1,rep,name=group,proto3" json:"group,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *CandidaturasDeCidade) Reset()         { *m = CandidaturasDeCidade{} }
func (m *CandidaturasDeCidade) String() string { return proto.CompactTextString(m) }
func (*CandidaturasDeCidade) ProtoMessage()    {}
func (*CandidaturasDeCidade) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc4fb5b387980952, []int{2}
}

func (m *CandidaturasDeCidade) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CandidaturasDeCidade.Unmarshal(m, b)
}
func (m *CandidaturasDeCidade) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CandidaturasDeCidade.Marshal(b, m, deterministic)
}
func (m *CandidaturasDeCidade) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CandidaturasDeCidade.Merge(m, src)
}
func (m *CandidaturasDeCidade) XXX_Size() int {
	return xxx_messageInfo_CandidaturasDeCidade.Size(m)
}
func (m *CandidaturasDeCidade) XXX_DiscardUnknown() {
	xxx_messageInfo_CandidaturasDeCidade.DiscardUnknown(m)
}

var xxx_messageInfo_CandidaturasDeCidade proto.InternalMessageInfo

func (m *CandidaturasDeCidade) GetGroup() map[string]*Candidatura {
	if m != nil {
		return m.Group
	}
	return nil
}

func init() {
	proto.RegisterType((*Candidatura)(nil), "descritor.Candidatura")
	proto.RegisterType((*Candidato)(nil), "descritor.Candidato")
	proto.RegisterType((*CandidaturasDeCidade)(nil), "descritor.CandidaturasDeCidade")
	proto.RegisterMapType((map[string]*Candidatura)(nil), "descritor.CandidaturasDeCidade.GroupEntry")
}

func init() { proto.RegisterFile("candidatura.proto", fileDescriptor_bc4fb5b387980952) }

var fileDescriptor_bc4fb5b387980952 = []byte{
	// 650 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x94, 0x6f, 0x6e, 0xd3, 0x4c,
	0x10, 0xc6, 0xe5, 0xa4, 0xe9, 0x5b, 0x4f, 0xfa, 0x77, 0x9b, 0xb7, 0x5a, 0x45, 0x08, 0xa2, 0x08,
	0xa1, 0x08, 0x55, 0x29, 0x0a, 0x7c, 0x40, 0xfd, 0x44, 0x49, 0xd3, 0x0a, 0xa9, 0x94, 0xc8, 0x4d,
	0x0e, 0xb0, 0xb5, 0xb7, 0x66, 0x85, 0xed, 0x31, 0xeb, 0xdd, 0x4a, 0x3d, 0x01, 0x77, 0xe1, 0x26,
	0xdc, 0x0a, 0xed, 0xd8, 0x49, 0x9c, 0x92, 0x6f, 0x3b, 0xcf, 0x3c, 0x33, 0x3b, 0xc9, 0xfe, 0xc6,
	0x70, 0x14, 0x8a, 0x2c, 0x52, 0x91, 0x30, 0x56, 0x8b, 0x61, 0xae, 0xd1, 0x20, 0xf3, 0x23, 0x59,
	0x84, 0x5a, 0x19, 0xd4, 0xdd, 0x57, 0x31, 0x62, 0x9c, 0xc8, 0x33, 0x4a, 0xdc, 0xdb, 0x87, 0x33,
	0xa3, 0x52, 0x59, 0x18, 0x91, 0xe6, 0xa5, 0xb7, 0xff, 0xa7, 0x05, 0xed, 0xf1, 0xaa, 0x03, 0xeb,
	0x41, 0xfb, 0x46, 0xc6, 0xaa, 0x48, 0x28, 0xe4, 0x5e, 0xcf, 0x1b, 0x34, 0x83, 0xba, 0xc4, 0x3a,
	0xd0, 0x1a, 0x0b, 0x1d, 0x23, 0x6f, 0xf4, 0xbc, 0x81, 0x1f, 0x94, 0x01, 0xdb, 0x87, 0xc6, 0xfc,
	0x8a, 0x37, 0x49, 0x6a, 0xcc, 0xaf, 0xd8, 0x0b, 0xf0, 0xbf, 0xda, 0x4c, 0x85, 0x2a, 0x57, 0xc8,
	0xb7, 0x48, 0x5e, 0x09, 0xec, 0x25, 0xc0, 0xad, 0x4d, 0xa5, 0xc6, 0xb9, 0xce, 0x04, 0x6f, 0xd1,
	0x25, 0x35, 0x85, 0x75, 0x61, 0xe7, 0x16, 0x53, 0x49, 0xd9, 0x6d, 0x2a, 0x5e, 0xc6, 0xec, 0x04,
	0xb6, 0x2f, 0x72, 0x13, 0x09, 0xe4, 0xff, 0x51, 0xa6, 0x8a, 0xdc, 0xe4, 0x97, 0xf2, 0x41, 0x6a,
	0x95, 0xca, 0xcc, 0x20, 0xdf, 0xa1, 0x64, 0x5d, 0x62, 0x6f, 0x60, 0x7f, 0xa6, 0x72, 0xbc, 0x88,
	0xb5, 0x4c, 0x95, 0x08, 0x05, 0x72, 0x9f, 0x4c, 0xcf, 0x54, 0xf6, 0x1a, 0xf6, 0xca, 0x59, 0xa6,
	0x42, 0x1b, 0x15, 0x21, 0x07, 0x1a, 0x70, 0x5d, 0x74, 0xdd, 0x6e, 0x64, 0x2c, 0xb3, 0x48, 0x2c,
	0x6c, 0xed, 0xb2, 0xdb, 0xba, 0xea, 0xe6, 0x72, 0xb3, 0x2f, 0x4c, 0xbb, 0xe5, 0x5c, 0x35, 0x89,
	0xee, 0xc3, 0x54, 0x8e, 0x31, 0x51, 0x31, 0x8d, 0xb5, 0x47, 0x9e, 0x75, 0x91, 0x9d, 0xc2, 0x51,
	0x55, 0x50, 0xac, 0x9c, 0xfb, 0xe4, 0xfc, 0x37, 0xc1, 0xfa, 0xb0, 0x7b, 0x29, 0xc3, 0x44, 0x68,
	0xb4, 0x9f, 0x65, 0x56, 0xf0, 0x83, 0x9e, 0x37, 0xd8, 0x09, 0xd6, 0x34, 0xf6, 0x01, 0xfe, 0xbf,
	0x53, 0xc6, 0x3a, 0xff, 0xd4, 0xfd, 0x47, 0x4a, 0xe3, 0xcc, 0xea, 0x0c, 0xf9, 0x21, 0x75, 0xdd,
	0x9c, 0x64, 0x23, 0xe8, 0x2c, 0x12, 0x77, 0x32, 0xb6, 0x59, 0x54, 0x15, 0x1d, 0x51, 0xd1, 0xc6,
	0x1c, 0x7b, 0x07, 0xc7, 0x77, 0xf2, 0xa7, 0x95, 0x59, 0xa8, 0x44, 0xb2, 0xc0, 0x0d, 0x39, 0xa3,
	0x92, 0x4d, 0x29, 0x36, 0x02, 0x3f, 0x5c, 0xfa, 0x8e, 0x7b, 0xde, 0xa0, 0x3d, 0xea, 0x0c, 0x97,
	0x5c, 0x0f, 0x97, 0xc6, 0x60, 0x65, 0xeb, 0xff, 0x6a, 0x82, 0xbf, 0xea, 0x50, 0x12, 0xe9, 0x6d,
	0x26, 0xb2, 0xf1, 0x9c, 0xc8, 0x73, 0x80, 0x5b, 0x51, 0x84, 0x15, 0x3c, 0x4d, 0xba, 0xb0, 0x3b,
	0x2c, 0xb7, 0x67, 0xb8, 0xd8, 0x9e, 0xe1, 0x6c, 0xb1, 0x3d, 0x41, 0xcd, 0xcd, 0x06, 0x70, 0x30,
	0x53, 0xc6, 0x26, 0x38, 0x49, 0xa4, 0x9b, 0x4e, 0x24, 0x15, 0xf1, 0xcf, 0x65, 0xc7, 0xee, 0xb5,
	0xcc, 0xa4, 0x46, 0x62, 0xde, 0x0f, 0xaa, 0xc8, 0x11, 0x70, 0xad, 0x85, 0xfd, 0x92, 0x15, 0x46,
	0x5b, 0xf7, 0xae, 0x25, 0xf4, 0xeb, 0xa2, 0x23, 0x69, 0x52, 0x18, 0x11, 0xe1, 0x58, 0x3d, 0xaa,
	0xa4, 0xc2, 0xbf, 0x2e, 0x31, 0x06, 0x5b, 0x81, 0x08, 0x45, 0x05, 0x3f, 0x9d, 0xdd, 0x2e, 0x7d,
	0x0b, 0x6d, 0x5e, 0xe3, 0x7d, 0x19, 0xb3, 0x43, 0x68, 0x8e, 0xa7, 0x57, 0xc4, 0xb7, 0x1f, 0xb8,
	0xa3, 0xeb, 0xe0, 0xb0, 0xab, 0x58, 0xa6, 0xb3, 0xdb, 0xf8, 0x49, 0x2a, 0x54, 0x52, 0xb1, 0x5b,
	0x06, 0xae, 0xef, 0xf4, 0x3b, 0x1a, 0x9c, 0x07, 0x37, 0x15, 0xb0, 0xcb, 0xb8, 0xff, 0xdb, 0x83,
	0x4e, 0xed, 0xab, 0x52, 0x5c, 0xca, 0xb1, 0x8a, 0x44, 0x24, 0xd9, 0x27, 0x68, 0xc5, 0x1a, 0x6d,
	0xce, 0xbd, 0x5e, 0x73, 0xd0, 0x1e, 0xbd, 0xdd, 0xf0, 0xa4, 0x75, 0xff, 0xf0, 0xda, 0x99, 0x27,
	0x99, 0xd1, 0x4f, 0x41, 0x59, 0xd8, 0x9d, 0x02, 0xac, 0x44, 0xf7, 0x03, 0x7e, 0xc8, 0xa7, 0xea,
	0x95, 0xdd, 0x91, 0x9d, 0x42, 0xeb, 0x51, 0x24, 0x56, 0xd2, 0x13, 0xb7, 0x47, 0x27, 0x9b, 0x6f,
	0x08, 0x4a, 0xd3, 0x79, 0xe3, 0xa3, 0x77, 0xbf, 0x4d, 0xcf, 0xfb, 0xfe, 0x6f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x06, 0xb8, 0xa5, 0x4e, 0x4a, 0x05, 0x00, 0x00,
}
